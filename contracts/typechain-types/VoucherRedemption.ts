/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface VoucherRedemptionInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createVoucher"
      | "getVoucherAmount"
      | "getVoucherStatus"
      | "redeemVoucher"
      | "vouchers"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "VoucherCreated" | "VoucherRedeemed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "createVoucher",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getVoucherAmount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getVoucherStatus",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemVoucher",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "vouchers", values: [BytesLike]): string;

  decodeFunctionResult(
    functionFragment: "createVoucher",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoucherAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoucherStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemVoucher",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vouchers", data: BytesLike): Result;
}

export namespace VoucherCreatedEvent {
  export type InputTuple = [
    voucherId: BytesLike,
    amount: BigNumberish,
    creator: AddressLike
  ];
  export type OutputTuple = [
    voucherId: string,
    amount: bigint,
    creator: string
  ];
  export interface OutputObject {
    voucherId: string;
    amount: bigint;
    creator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoucherRedeemedEvent {
  export type InputTuple = [
    voucherId: BytesLike,
    amount: BigNumberish,
    redeemer: AddressLike
  ];
  export type OutputTuple = [
    voucherId: string,
    amount: bigint,
    redeemer: string
  ];
  export interface OutputObject {
    voucherId: string;
    amount: bigint;
    redeemer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface VoucherRedemption extends BaseContract {
  connect(runner?: ContractRunner | null): VoucherRedemption;
  waitForDeployment(): Promise<this>;

  interface: VoucherRedemptionInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createVoucher: TypedContractMethod<[voucherId: BytesLike], [void], "payable">;

  getVoucherAmount: TypedContractMethod<
    [voucherId: BytesLike],
    [bigint],
    "view"
  >;

  getVoucherStatus: TypedContractMethod<
    [voucherId: BytesLike],
    [
      [boolean, boolean, string, bigint] & {
        exists: boolean;
        redeemed: boolean;
        creator: string;
        amount: bigint;
      }
    ],
    "view"
  >;

  redeemVoucher: TypedContractMethod<
    [voucherId: BytesLike],
    [void],
    "nonpayable"
  >;

  vouchers: TypedContractMethod<
    [arg0: BytesLike],
    [
      [bigint, string, boolean] & {
        amount: bigint;
        creator: string;
        redeemed: boolean;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createVoucher"
  ): TypedContractMethod<[voucherId: BytesLike], [void], "payable">;
  getFunction(
    nameOrSignature: "getVoucherAmount"
  ): TypedContractMethod<[voucherId: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getVoucherStatus"
  ): TypedContractMethod<
    [voucherId: BytesLike],
    [
      [boolean, boolean, string, bigint] & {
        exists: boolean;
        redeemed: boolean;
        creator: string;
        amount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "redeemVoucher"
  ): TypedContractMethod<[voucherId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "vouchers"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [bigint, string, boolean] & {
        amount: bigint;
        creator: string;
        redeemed: boolean;
      }
    ],
    "view"
  >;

  getEvent(
    key: "VoucherCreated"
  ): TypedContractEvent<
    VoucherCreatedEvent.InputTuple,
    VoucherCreatedEvent.OutputTuple,
    VoucherCreatedEvent.OutputObject
  >;
  getEvent(
    key: "VoucherRedeemed"
  ): TypedContractEvent<
    VoucherRedeemedEvent.InputTuple,
    VoucherRedeemedEvent.OutputTuple,
    VoucherRedeemedEvent.OutputObject
  >;

  filters: {
    "VoucherCreated(bytes32,uint256,address)": TypedContractEvent<
      VoucherCreatedEvent.InputTuple,
      VoucherCreatedEvent.OutputTuple,
      VoucherCreatedEvent.OutputObject
    >;
    VoucherCreated: TypedContractEvent<
      VoucherCreatedEvent.InputTuple,
      VoucherCreatedEvent.OutputTuple,
      VoucherCreatedEvent.OutputObject
    >;

    "VoucherRedeemed(bytes32,uint256,address)": TypedContractEvent<
      VoucherRedeemedEvent.InputTuple,
      VoucherRedeemedEvent.OutputTuple,
      VoucherRedeemedEvent.OutputObject
    >;
    VoucherRedeemed: TypedContractEvent<
      VoucherRedeemedEvent.InputTuple,
      VoucherRedeemedEvent.OutputTuple,
      VoucherRedeemedEvent.OutputObject
    >;
  };
}
