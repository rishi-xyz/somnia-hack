/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../common";
import type {
  SomniaNameService,
  SomniaNameServiceInterface,
} from "../SomniaNameService";

const _abi = [
  {
    inputs: [],
    name: "InvalidName",
    type: "error",
  },
  {
    inputs: [],
    name: "NameAlreadyExists",
    type: "error",
  },
  {
    inputs: [],
    name: "NameNotFound",
    type: "error",
  },
  {
    inputs: [],
    name: "NotOwner",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        indexed: false,
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "NameRegistered",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        indexed: false,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "NameTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
    ],
    name: "getNameInfo",
    outputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "registeredAt",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "exists",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "getOwnerNames",
    outputs: [
      {
        internalType: "string[]",
        name: "",
        type: "string[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    name: "names",
    outputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "registeredAt",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "ownerNames",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
    ],
    name: "registerName",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
    ],
    name: "resolveName",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferName",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061118f806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c806366ae36b71161005b57806366ae36b7146100d3578063822fbf581461010d578063bc19bce51461016a578063db6fb7931461019557600080fd5b80630830602b14610082578063146c42a21461009757806337194d1e146100c0575b600080fd5b610095610090366004610afb565b6101b5565b005b6100aa6100a5366004610b59565b610322565b6040516100b79190610bd3565b60405180910390f35b6100956100ce366004610bed565b6103db565b6100e66100e1366004610afb565b61059f565b604080516001600160a01b03909416845260208401929092521515908201526060016100b7565b61014b61011b366004610c57565b8051602081830181018051600082529282019190930120915280546001909101546001600160a01b039091169082565b604080516001600160a01b0390931683526020830191909152016100b7565b61017d610178366004610afb565b6105f7565b6040516001600160a01b0390911681526020016100b7565b6101a86101a3366004610d08565b61067f565b6040516100b79190610d23565b60006001600160a01b0316600083836040516101d2929190610d85565b908152604051908190036020019020546001600160a01b03161461020957604051633480a50360e21b815260040160405180910390fd5b61024882828080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061076e92505050565b6102655760405163430f13b360e01b815260040160405180910390fd5b60408051808201825233815242602082015290516000906102899085908590610d85565b9081526040805160209281900383019020835181546001600160a01b0319166001600160a01b039091161781559282015160019384015533600090815283835290812080549384018155815220016102e2828483610e1e565b507f1c6eac0e720ec22bb0653aec9c19985633a4fb07971cf973096c2f8e3c37c17f82823360405161031693929190610f08565b60405180910390a15050565b6001602052816000526040600020818154811061033e57600080fd5b9060005260206000200160009150915050805461035a90610d95565b80601f016020809104026020016040519081016040528092919081815260200182805461038690610d95565b80156103d35780601f106103a8576101008083540402835291602001916103d3565b820191906000526020600020905b8154815290600101906020018083116103b657829003601f168201915b505050505081565b82828080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525060405133945090925061042291508490610f34565b908152604051908190036020019020546001600160a01b031614610459576040516330cd747160e01b815260040160405180910390fd5b6001600160a01b0382166104805760405163430f13b360e01b815260040160405180910390fd5b6000808585604051610493929190610d85565b908152604051908190036020018120546001600160a01b0316915083906000906104c09088908890610d85565b908152604080516020928190038301812080546001600160a01b0319166001600160a01b039590951694909417909355601f87018290048202830182019052858252610528918391889088908190840183828082843760009201919091525061095d92505050565b6001600160a01b038316600090815260016020818152604083208054928301815583529091200161055a858783610e1e565b507f21e177c2bf9adbd548d25cc65d54b697122f907257d8318bddc22375fe666de8858583866040516105909493929190610f50565b60405180910390a15050505050565b600080600080600086866040516105b7929190610d85565b908152604080516020928190038301812081830190925281546001600160a01b031680825260019092015492018290529790965087151595509350505050565b6000806001600160a01b031660008484604051610615929190610d85565b908152604051908190036020019020546001600160a01b03160361064b57604051620ed35560ea1b815260040160405180910390fd5b6000838360405161065d929190610d85565b908152604051908190036020019020546001600160a01b031690505b92915050565b6001600160a01b0381166000908152600160209081526040808320805482518185028101850190935280835260609492939192909184015b828210156107635783829060005260206000200180546106d690610d95565b80601f016020809104026020016040519081016040528092919081815260200182805461070290610d95565b801561074f5780601f106107245761010080835404028352916020019161074f565b820191906000526020600020905b81548152906001019060200180831161073257829003601f168201915b5050505050815260200190600101906106b7565b505050509050919050565b8051600090829015806107825750603f8151115b156107905750600092915050565b6008815110156107a35750600092915050565b6040805180820190915260078152662e736f6d6e696160c81b60208201528060005b8151811015610851578181815181106107e0576107e0610f85565b602001015160f81c60f81b6001600160f81b0319168482845187516108059190610fb1565b61080f9190610fc4565b8151811061081f5761081f610f85565b01602001516001600160f81b0319161461083f5750600095945050505050565b8061084981610fd7565b9150506107c5565b5060005b600784516108639190610fb1565b81101561095157600084828151811061087e5761087e610f85565b01602001516001600160f81b0319169050600360fc1b81108015906108b15750603960f81b6001600160f81b0319821611155b806108e35750604160f81b6001600160f81b03198216108015906108e35750602d60f91b6001600160f81b0319821611155b806109155750606160f81b6001600160f81b03198216108015906109155750603d60f91b6001600160f81b0319821611155b8061092d5750602d60f81b6001600160f81b03198216145b61093e575060009695505050505050565b508061094981610fd7565b915050610855565b50600195945050505050565b6001600160a01b0382166000908152600160205260408120905b8154811015610a5657828051906020012082828154811061099a5761099a610f85565b906000526020600020016040516109b19190610ff0565b604051809103902003610a4457815482906109ce90600190610fb1565b815481106109de576109de610f85565b906000526020600020018282815481106109fa576109fa610f85565b906000526020600020019081610a109190611066565b5081805480610a2157610a21611143565b600190038181906000526020600020016000610a3d9190610a5c565b9055610a56565b80610a4e81610fd7565b915050610977565b50505050565b508054610a6890610d95565b6000825580601f10610a78575050565b601f016020900490600052602060002090810190610a969190610a99565b50565b5b80821115610aae5760008155600101610a9a565b5090565b60008083601f840112610ac457600080fd5b50813567ffffffffffffffff811115610adc57600080fd5b602083019150836020828501011115610af457600080fd5b9250929050565b60008060208385031215610b0e57600080fd5b823567ffffffffffffffff811115610b2557600080fd5b610b3185828601610ab2565b90969095509350505050565b80356001600160a01b0381168114610b5457600080fd5b919050565b60008060408385031215610b6c57600080fd5b610b7583610b3d565b946020939093013593505050565b60005b83811015610b9e578181015183820152602001610b86565b50506000910152565b60008151808452610bbf816020860160208601610b83565b601f01601f19169290920160200192915050565b602081526000610be66020830184610ba7565b9392505050565b600080600060408486031215610c0257600080fd5b833567ffffffffffffffff811115610c1957600080fd5b610c2586828701610ab2565b9094509250610c38905060208501610b3d565b90509250925092565b634e487b7160e01b600052604160045260246000fd5b600060208284031215610c6957600080fd5b813567ffffffffffffffff80821115610c8157600080fd5b818401915084601f830112610c9557600080fd5b813581811115610ca757610ca7610c41565b604051601f8201601f19908116603f01168101908382118183101715610ccf57610ccf610c41565b81604052828152876020848701011115610ce857600080fd5b826020860160208301376000928101602001929092525095945050505050565b600060208284031215610d1a57600080fd5b610be682610b3d565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610d7857603f19888603018452610d66858351610ba7565b94509285019290850190600101610d4a565b5092979650505050505050565b8183823760009101908152919050565b600181811c90821680610da957607f821691505b602082108103610dc957634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115610e1957600081815260208120601f850160051c81016020861015610df65750805b601f850160051c820191505b81811015610e1557828155600101610e02565b5050505b505050565b67ffffffffffffffff831115610e3657610e36610c41565b610e4a83610e448354610d95565b83610dcf565b6000601f841160018114610e7e5760008515610e665750838201355b600019600387901b1c1916600186901b178355610ed8565b600083815260209020601f19861690835b82811015610eaf5786850135825560209485019460019092019101610e8f565b5086821015610ecc5760001960f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b604081526000610f1c604083018587610edf565b905060018060a01b0383166020830152949350505050565b60008251610f46818460208701610b83565b9190910192915050565b606081526000610f64606083018688610edf565b6001600160a01b039485166020840152929093166040909101529392505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b8181038181111561067957610679610f9b565b8082018082111561067957610679610f9b565b600060018201610fe957610fe9610f9b565b5060010190565b6000808354610ffe81610d95565b60018281168015611016576001811461102b5761105a565b60ff198416875282151583028701945061105a565b8760005260208060002060005b858110156110515781548a820152908401908201611038565b50505082870194505b50929695505050505050565b818103611071575050565b61107b8254610d95565b67ffffffffffffffff81111561109357611093610c41565b6110a7816110a18454610d95565b84610dcf565b6000601f8211600181146110db57600083156110c35750848201545b600019600385901b1c1916600184901b178455610ed8565b600085815260209020601f19841690600086815260209020845b8381101561111557828601548255600195860195909101906020016110f5565b50858310156111335781850154600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052603160045260246000fdfea26469706673582212206301fd77c45f9f1f6f5c45cfb37e9445bb84a92ddd493112c2ed56acdb9d702e64736f6c63430008140033";

type SomniaNameServiceConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SomniaNameServiceConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SomniaNameService__factory extends ContractFactory {
  constructor(...args: SomniaNameServiceConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      SomniaNameService & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): SomniaNameService__factory {
    return super.connect(runner) as SomniaNameService__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SomniaNameServiceInterface {
    return new Interface(_abi) as SomniaNameServiceInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): SomniaNameService {
    return new Contract(address, _abi, runner) as unknown as SomniaNameService;
  }
}
