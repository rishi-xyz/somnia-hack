/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface SomniaNameServiceInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getNameInfo"
      | "getOwnerNames"
      | "names"
      | "ownerNames"
      | "registerName"
      | "resolveName"
      | "transferName"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "NameRegistered" | "NameTransferred"
  ): EventFragment;

  encodeFunctionData(functionFragment: "getNameInfo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getOwnerNames",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "names", values: [string]): string;
  encodeFunctionData(
    functionFragment: "ownerNames",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerName",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "resolveName", values: [string]): string;
  encodeFunctionData(
    functionFragment: "transferName",
    values: [string, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "getNameInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOwnerNames",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "names", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerNames", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferName",
    data: BytesLike
  ): Result;
}

export namespace NameRegisteredEvent {
  export type InputTuple = [name: string, owner: AddressLike];
  export type OutputTuple = [name: string, owner: string];
  export interface OutputObject {
    name: string;
    owner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NameTransferredEvent {
  export type InputTuple = [name: string, from: AddressLike, to: AddressLike];
  export type OutputTuple = [name: string, from: string, to: string];
  export interface OutputObject {
    name: string;
    from: string;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SomniaNameService extends BaseContract {
  connect(runner?: ContractRunner | null): SomniaNameService;
  waitForDeployment(): Promise<this>;

  interface: SomniaNameServiceInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getNameInfo: TypedContractMethod<
    [name: string],
    [
      [string, bigint, boolean] & {
        owner: string;
        registeredAt: bigint;
        exists: boolean;
      }
    ],
    "view"
  >;

  getOwnerNames: TypedContractMethod<[owner: AddressLike], [string[]], "view">;

  names: TypedContractMethod<
    [arg0: string],
    [[string, bigint] & { owner: string; registeredAt: bigint }],
    "view"
  >;

  ownerNames: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  registerName: TypedContractMethod<[name: string], [void], "nonpayable">;

  resolveName: TypedContractMethod<[name: string], [string], "view">;

  transferName: TypedContractMethod<
    [name: string, newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getNameInfo"
  ): TypedContractMethod<
    [name: string],
    [
      [string, bigint, boolean] & {
        owner: string;
        registeredAt: bigint;
        exists: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getOwnerNames"
  ): TypedContractMethod<[owner: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "names"
  ): TypedContractMethod<
    [arg0: string],
    [[string, bigint] & { owner: string; registeredAt: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "ownerNames"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "registerName"
  ): TypedContractMethod<[name: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "resolveName"
  ): TypedContractMethod<[name: string], [string], "view">;
  getFunction(
    nameOrSignature: "transferName"
  ): TypedContractMethod<
    [name: string, newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "NameRegistered"
  ): TypedContractEvent<
    NameRegisteredEvent.InputTuple,
    NameRegisteredEvent.OutputTuple,
    NameRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "NameTransferred"
  ): TypedContractEvent<
    NameTransferredEvent.InputTuple,
    NameTransferredEvent.OutputTuple,
    NameTransferredEvent.OutputObject
  >;

  filters: {
    "NameRegistered(string,address)": TypedContractEvent<
      NameRegisteredEvent.InputTuple,
      NameRegisteredEvent.OutputTuple,
      NameRegisteredEvent.OutputObject
    >;
    NameRegistered: TypedContractEvent<
      NameRegisteredEvent.InputTuple,
      NameRegisteredEvent.OutputTuple,
      NameRegisteredEvent.OutputObject
    >;

    "NameTransferred(string,address,address)": TypedContractEvent<
      NameTransferredEvent.InputTuple,
      NameTransferredEvent.OutputTuple,
      NameTransferredEvent.OutputObject
    >;
    NameTransferred: TypedContractEvent<
      NameTransferredEvent.InputTuple,
      NameTransferredEvent.OutputTuple,
      NameTransferredEvent.OutputObject
    >;
  };
}
